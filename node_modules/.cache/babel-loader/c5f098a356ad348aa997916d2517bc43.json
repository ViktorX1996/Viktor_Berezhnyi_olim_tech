{"ast":null,"code":"import { postAPI } from \"../api/api\";\nimport { store } from './../index';\nconst SET_TEST = 'SET_TEST';\nconst SET_DATA = 'SET_DATA';\nconst SET_POSTS_BY_PAGES = 'SET_POSTS_BY_PAGES';\nconst TOGGLE_COMMENT = 'TOGGLE_COMMENT';\nconst defaultState = {\n  currentUser: 'Guest',\n  searchStr: '',\n  pagination: {\n    totalPages: 5,\n    total: 0,\n    page: 1\n  },\n  cardData: [{\n    id: 1,\n    title: 'MyDream',\n    username: 'Jeremy',\n    likes: [],\n    dislikes: [],\n    votesNumber: 0,\n    timeStamp: new Date(),\n    image: 'empty',\n    isOpen: false,\n    comments: [{\n      text: 'Spasibo',\n      postId: 1,\n      id: 1,\n      username: 'Aboba',\n      dislikes: [],\n      likes: [],\n      votesNumber: 0,\n      timeStamp: new Date()\n    }]\n  }]\n};\n\nconst storeReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DATA:\n      return {};\n\n    case SET_TEST:\n      return { ...state,\n        currentUser: action.payload\n      };\n\n    case SET_POSTS_BY_PAGES:\n      return { ...state,\n        cardData: action.payload\n      };\n\n    case TOGGLE_COMMENT:\n      let buf = [...state.cardData];\n      let postId = [...state.cardData].findIndex(post => post.id === action.payload);\n      buf[postId].isOpen = !buf[postId].isOpen;\n      return { ...state,\n        cardData: buf\n      };\n\n    default:\n      return defaultState;\n  }\n};\n\nexport const setPostsByPages = payload => ({\n  type: SET_POSTS_BY_PAGES,\n  payload\n});\nexport const toggleComment = payload => ({\n  type: TOGGLE_COMMENT,\n  payload\n});\nexport const getPostsByPages = page => {\n  return dispatch => {\n    let cardDataBuffer;\n    postAPI.getPostsByPages(page).then(data => {\n      console.log(data);\n      cardDataBuffer = JSON.parse(JSON.stringify(data.result)); // make deep copy that will not change original data\n\n      cardDataBuffer = cardDataBuffer.map(item => {\n        item['timeStamp'] = item['date'];\n        delete item['date'];\n        item['isOpen'] = false;\n        item['votesNumber'] = item['likes'].length - item['dislikes'].length;\n        let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\n        commentsBuffer = commentsBuffer.map(comment => {\n          comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\n          return comment;\n        });\n        item['comments'] = commentsBuffer;\n        return item;\n      });\n      cardDataBuffer = cardDataBuffer.sort((a, b) => {\n        return b.id - a.id;\n      });\n      dispatch(setPostsByPages(cardDataBuffer));\n    });\n  };\n};\nexport const getPostsByKeyword = keyword => {\n  return dispatch => {\n    let cardDataBuffer;\n    postAPI.getPostsByKeyword(keyword).then(data => {\n      console.log(data);\n      cardDataBuffer = JSON.parse(JSON.stringify(data.result)); // make deep copy that will not change original data\n\n      cardDataBuffer = cardDataBuffer.map(item => {\n        item['timeStamp'] = item['date'];\n        delete item['date'];\n        item['isOpen'] = false;\n        item['votesNumber'] = item['likes'].length - item['dislikes'].length;\n        let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\n        commentsBuffer = commentsBuffer.map(comment => {\n          comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\n          return comment;\n        });\n        item['comments'] = commentsBuffer;\n        return item;\n      });\n      cardDataBuffer = cardDataBuffer.sort((a, b) => {\n        return b.id - a.id;\n      });\n      dispatch(setPostsByPages(cardDataBuffer));\n    });\n  };\n};\nexport const createPost = (title, username) => {\n  return dispatch => {\n    postAPI.createPost(title, username).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(data);\n    });\n  };\n};\nexport const deletePost = id => {\n  return dispatch => {\n    postAPI.deletePost(id).then(data => {\n      console.log(data);\n      dispatch(getPostsByPages(1));\n    });\n  };\n};\nexport const deleteComment = (postId, id) => {\n  return dispatch => {\n    postAPI.deleteComment(id).then(data => {\n      console.log(data);\n      dispatch(getPostsByPages(1));\n      setTimeout(() => {\n        dispatch(toggleComment(postId));\n      }, 20);\n    });\n  };\n};\nexport const editPost = (id, title) => {\n  return dispatch => {\n    postAPI.editPost(id, title).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(data);\n    });\n  };\n};\nexport const addPostLike = (id, username) => {\n  let flag = false;\n  let likesBuf = store.getState().cardData.find(post => post.id === id).likes;\n  flag = likesBuf.includes(username);\n\n  if (!flag) {\n    likesBuf.push(username);\n    console.log(likesBuf + \" ---IS DONE\");\n  }\n\n  return dispatch => {\n    if (flag) return null;\n    postAPI.addPostLike(id, likesBuf).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(\"POST API SEND\", data);\n    });\n  };\n};\nexport const addCommentLike = (postId, id, username) => {\n  let flag = false;\n  let likesBuf = store.getState().cardData.find(post => post.id === postId).comments.find(comment => comment.id === id).likes;\n  console.warn(likesBuf);\n  flag = likesBuf.includes(username);\n\n  if (!flag) {\n    likesBuf.push(username);\n    console.log(likesBuf + \" ---LIKE IN REDUCER COMMENT DONE\");\n  }\n\n  return dispatch => {\n    if (flag) return null;\n    postAPI.addCommentLike(id, likesBuf).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(\"POST API comment like SEND\", data);\n      setTimeout(() => {\n        dispatch(toggleComment(postId));\n      }, 20);\n    });\n  };\n};\nexport const addPostDislike = (id, username) => {\n  let flag = false;\n  let dislikesBuf = store.getState().cardData.find(post => post.id === id).dislikes;\n  flag = dislikesBuf.includes(username);\n\n  if (!flag) {\n    dislikesBuf.push(username);\n  }\n\n  return dispatch => {\n    if (flag) return null;\n    postAPI.addPostDislike(id, dislikesBuf).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(\"POST API SEND\", data);\n    });\n  };\n};\nexport const addCommentDislike = (postId, id, username) => {\n  let flag = false;\n  let dislikesBuf = store.getState().cardData.find(post => post.id === postId).comments.find(comment => comment.id === id).dislikes;\n  flag = dislikesBuf.includes(username);\n\n  if (!flag) {\n    dislikesBuf.push(username);\n  }\n\n  return dispatch => {\n    if (flag) return null;\n    postAPI.addCommentDislike(id, dislikesBuf).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(\"POST API comment dislike SEND\", data);\n      setTimeout(() => {\n        dispatch(toggleComment(postId));\n      }, 20);\n    });\n  };\n};\nexport const createComment = (text, postId, username) => {\n  return dispatch => {\n    postAPI.createComment(text, postId, username).then(data => {\n      dispatch(getPostsByPages(1));\n      setTimeout(() => {\n        dispatch(toggleComment(postId));\n      }, 20);\n      console.log(data);\n    });\n  };\n};\nexport const editComment = (postId, id, text) => {\n  console.log(postId);\n  return dispatch => {\n    postAPI.editComment(id, text).then(data => {\n      dispatch(getPostsByPages(1));\n      console.log(data);\n      setTimeout(() => {\n        dispatch(toggleComment(postId));\n      }, 20);\n    });\n  };\n};\nexport default storeReducer;","map":{"version":3,"sources":["C:/diskDlyaHlama/olim_tech_practice/testTuskRedux/react-practical-assignment-main/client/src/Redux/storeReducer.js"],"names":["postAPI","store","SET_TEST","SET_DATA","SET_POSTS_BY_PAGES","TOGGLE_COMMENT","defaultState","currentUser","searchStr","pagination","totalPages","total","page","cardData","id","title","username","likes","dislikes","votesNumber","timeStamp","Date","image","isOpen","comments","text","postId","storeReducer","state","action","type","payload","buf","findIndex","post","setPostsByPages","toggleComment","getPostsByPages","dispatch","cardDataBuffer","then","data","console","log","JSON","parse","stringify","result","map","item","length","commentsBuffer","comment","sort","a","b","getPostsByKeyword","keyword","createPost","deletePost","deleteComment","setTimeout","editPost","addPostLike","flag","likesBuf","getState","find","includes","push","addCommentLike","warn","addPostDislike","dislikesBuf","addCommentDislike","createComment","editComment"],"mappings":"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","sourcesContent":["import {postAPI} from \"../api/api\";\r\nimport { store } from './../index';\r\n\r\n\r\n\r\nconst SET_TEST = 'SET_TEST'\r\nconst SET_DATA = 'SET_DATA'\r\nconst SET_POSTS_BY_PAGES = 'SET_POSTS_BY_PAGES';\r\nconst TOGGLE_COMMENT = 'TOGGLE_COMMENT';\r\n\r\nconst defaultState = {\r\n    currentUser: 'Guest',\r\n    searchStr: '',\r\n    pagination: {\r\n        totalPages: 5,\r\n        total: 0,\r\n        page: 1\r\n    },\r\n    cardData: [\r\n        {\r\n            id: 1,\r\n            title: 'MyDream',\r\n            username: 'Jeremy',\r\n            likes: [],\r\n            dislikes: [],\r\n            votesNumber: 0,\r\n            timeStamp: new Date(),\r\n            image: 'empty',\r\n            isOpen:false,\r\n            comments: [\r\n                {\r\n                    text: 'Spasibo',\r\n                    postId: 1,\r\n                    id: 1,\r\n                    username: 'Aboba',\r\n                    dislikes: [],\r\n                    likes: [],\r\n                    votesNumber: 0,\r\n                    timeStamp: new Date()\r\n                }\r\n            ]\r\n        }\r\n            \r\n    ]\r\n\r\n}\r\n\r\n\r\nconst storeReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return {\r\n\r\n            }\r\n        case SET_TEST:\r\n            return {...state, currentUser: action.payload}\r\n        case SET_POSTS_BY_PAGES:\r\n            return {...state, cardData: action.payload}\r\n        case TOGGLE_COMMENT:\r\n            let buf = [...state.cardData];\r\n            let postId = [...state.cardData].findIndex(post => post.id === action.payload);\r\n            buf[postId].isOpen = !buf[postId].isOpen;\r\n            \r\n            return {...state, cardData: buf}\r\n        default:\r\n            return defaultState\r\n    }\r\n}\r\n\r\n\r\nexport const setPostsByPages = (payload) => ({type: SET_POSTS_BY_PAGES, payload})\r\nexport const toggleComment = (payload) => ({type: TOGGLE_COMMENT, payload})\r\n\r\n\r\n\r\n\r\n\r\nexport const getPostsByPages = (page) => {\r\n    return (dispatch) =>{\r\n        let cardDataBuffer;\r\n        postAPI.getPostsByPages(page).then(\r\n            data => {\r\n                console.log(data)\r\n                cardDataBuffer = JSON.parse(JSON.stringify(data.result)) // make deep copy that will not change original data\r\n                cardDataBuffer = cardDataBuffer.map(item => {\r\n                    item['timeStamp'] = item['date']\r\n                    delete item['date'];\r\n                    item['isOpen'] = false;\r\n                    item['votesNumber'] = item['likes'].length - item['dislikes'].length;\r\n                    let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\r\n                    commentsBuffer = commentsBuffer.map(comment => {\r\n                        comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\r\n                        return comment;\r\n                    })\r\n                    item['comments'] = commentsBuffer;\r\n                    return item;\r\n                })\r\n\r\n                cardDataBuffer = cardDataBuffer.sort((a, b) => {\r\n                      return b.id - a.id;\r\n                    });\r\n\r\n                dispatch(setPostsByPages(cardDataBuffer))\r\n            }\r\n        );\r\n\r\n    }}\r\n\r\n\r\n    export const getPostsByKeyword = (keyword) => {\r\n        return (dispatch) =>{\r\n            let cardDataBuffer;\r\n            postAPI.getPostsByKeyword(keyword).then(\r\n                data => {\r\n                    console.log(data)\r\n                    cardDataBuffer = JSON.parse(JSON.stringify(data.result)) // make deep copy that will not change original data\r\n                    cardDataBuffer = cardDataBuffer.map(item => {\r\n                        item['timeStamp'] = item['date']\r\n                        delete item['date'];\r\n    \r\n    \r\n                        item['isOpen'] = false;\r\n    \r\n    \r\n                        item['votesNumber'] = item['likes'].length - item['dislikes'].length;\r\n                        let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\r\n                        commentsBuffer = commentsBuffer.map(comment => {\r\n                            comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\r\n                            return comment;\r\n                        })\r\n                        item['comments'] = commentsBuffer;\r\n                        \r\n                        return item;\r\n                    })\r\n    \r\n                    cardDataBuffer = cardDataBuffer.sort((a, b) => {\r\n                          return b.id - a.id;\r\n                        });\r\n    \r\n                    dispatch(setPostsByPages(cardDataBuffer))\r\n                }\r\n            );\r\n    \r\n        }}\r\n\r\n    export const createPost = (title,username) => {\r\n        return (dispatch) => {\r\n            postAPI.createPost(title,username).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    export const deletePost = (id) => {\r\n        return (dispatch) => {\r\n            postAPI.deletePost(id).then(\r\n                data => {\r\n                    console.log(data)\r\n                    dispatch(getPostsByPages(1))   \r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const deleteComment = (postId,id) => {\r\n        return (dispatch) => {\r\n            postAPI.deleteComment(id).then(\r\n                data => {\r\n                    console.log(data)\r\n                    dispatch(getPostsByPages(1))   \r\n                    setTimeout(() => {\r\n                        dispatch(toggleComment(postId))\r\n                    },20)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const editPost = (id,title) => {\r\n        return (dispatch) => {\r\n            postAPI.editPost(id,title).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const addPostLike = (id,username) => {\r\n        let flag = false;\r\n        let likesBuf = store.getState().cardData.find(post => post.id === id).likes;\r\n        flag = likesBuf.includes(username);\r\n        if(!flag){\r\n            likesBuf.push(username)\r\n            console.log(likesBuf + \" ---IS DONE\");\r\n        }\r\n        return (dispatch) => {\r\n            if(flag) \r\n                return null;\r\n            postAPI.addPostLike(id,likesBuf).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(\"POST API SEND\", data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const addCommentLike = (postId,id,username) => {\r\n        let flag = false;\r\n        let likesBuf = store.getState().cardData.find(post => post.id === postId).comments.find(comment => comment.id === id).likes;\r\n        console.warn(likesBuf);\r\n        flag = likesBuf.includes(username);\r\n        if(!flag){\r\n            likesBuf.push(username)\r\n            console.log(likesBuf + \" ---LIKE IN REDUCER COMMENT DONE\");\r\n        }\r\n        return (dispatch) => {\r\n            if(flag) \r\n                return null;\r\n            postAPI.addCommentLike(id,likesBuf).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(\"POST API comment like SEND\", data)\r\n                    setTimeout(() => {\r\n                        dispatch(toggleComment(postId))\r\n                    },20)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const addPostDislike = (id,username) => {\r\n        let flag = false;\r\n        let dislikesBuf = store.getState().cardData.find(post => post.id === id).dislikes;\r\n        flag = dislikesBuf.includes(username);\r\n        if(!flag){\r\n            dislikesBuf.push(username)\r\n        }\r\n        return (dispatch) => {\r\n            if(flag) \r\n                return null;\r\n            postAPI.addPostDislike(id,dislikesBuf).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(\"POST API SEND\", data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const addCommentDislike = (postId,id,username) => {\r\n        let flag = false;\r\n        let dislikesBuf = store.getState().cardData.find(post => post.id === postId).comments.find(comment => comment.id === id).dislikes;\r\n        flag = dislikesBuf.includes(username);\r\n        if(!flag){\r\n            dislikesBuf.push(username)\r\n        }\r\n        return (dispatch) => {\r\n            if(flag) \r\n                return null;\r\n            postAPI.addCommentDislike(id,dislikesBuf).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(\"POST API comment dislike SEND\", data)\r\n                    setTimeout(() => {\r\n                        dispatch(toggleComment(postId))\r\n                    },20)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const createComment = (text,postId,username) => {\r\n        return (dispatch) => {\r\n            postAPI.createComment(text,postId,username).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    setTimeout(() => {\r\n                        dispatch(toggleComment(postId))\r\n                    },20)\r\n                    console.log(data)\r\n                }\r\n            )\r\n        }\r\n    }\r\n    export const editComment = (postId,id,text) => {\r\n        console.log(postId);\r\n        return (dispatch) => {\r\n            postAPI.editComment(id,text).then(\r\n                data => {\r\n                    dispatch(getPostsByPages(1))\r\n                    console.log(data);\r\n                    setTimeout(() => {\r\n                        dispatch(toggleComment(postId))\r\n                    },20)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\nexport default storeReducer;"]},"metadata":{},"sourceType":"module"}