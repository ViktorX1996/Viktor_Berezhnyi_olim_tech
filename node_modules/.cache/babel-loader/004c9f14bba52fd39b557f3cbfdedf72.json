{"ast":null,"code":"import { postAPI } from \"../api/api\";\nconst SET_TEST = 'SET_TEST';\nconst SET_DATA = 'SET_DATA';\nconst SET_POSTS_BY_PAGES = 'SET_POSTS_BY_PAGES';\nconst TOGGLE_COMMENT = 'TOGGLE_COMMENT';\nconst defaultState = {\n  currentUser: 'Guest',\n  searchStr: '',\n  pagination: {\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1\n  },\n  cardData: [{\n    id: 1,\n    title: 'MyDream',\n    username: 'Jeremy',\n    likes: [],\n    dislikes: [],\n    votesNumber: 0,\n    timeStamp: new Date(),\n    image: 'empty',\n    isOpen: false,\n    comments: [{\n      text: 'Spasibo',\n      postId: 1,\n      id: 1,\n      username: 'Aboba',\n      dislikes: [],\n      likes: [],\n      votesNumber: 0,\n      timeStamp: new Date()\n    }]\n  }]\n};\n\nconst storeReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DATA:\n      return {};\n\n    case SET_TEST:\n      return { ...state,\n        currentUser: action.payload\n      };\n\n    case SET_POSTS_BY_PAGES:\n      return { ...state,\n        cardData: action.payload\n      };\n\n    case TOGGLE_COMMENT:\n      let buf = [...state.cardData];\n      let postId = 2;\n      buf[postId].isOpen = !buf[postId].isOpen;\n      return { ...state,\n        cardData: buf\n      };\n\n    default:\n      return defaultState;\n  }\n};\n\nexport const setPostsByPages = payload => ({\n  type: SET_POSTS_BY_PAGES,\n  payload\n});\nexport const toggleComment = payload => ({\n  type: TOGGLE_COMMENT,\n  payload\n});\nexport const getPostsByPages = page => {\n  return dispatch => {\n    let cardDataBuffer;\n    postAPI.getPostsByPages(page).then(data => {\n      console.log(data);\n      cardDataBuffer = JSON.parse(JSON.stringify(data.result)); // make deep copy that will not change original data\n\n      cardDataBuffer = cardDataBuffer.map(item => {\n        item['timeStamp'] = item['date'];\n        delete item['date'];\n        item['isOpen'] = false;\n        item['votesNumber'] = item['likes'].length - item['dislikes'].length;\n        let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\n        commentsBuffer = commentsBuffer.map(comment => {\n          comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\n          return comment;\n        });\n        item['comments'] = commentsBuffer;\n        return item;\n      });\n      dispatch(setPostsByPages(cardDataBuffer));\n    });\n  };\n};\nexport default storeReducer;","map":{"version":3,"sources":["C:/diskDlyaHlama/olim_tech_practice/testTuskRedux/react-practical-assignment-main/client/src/Redux/storeReducer.js"],"names":["postAPI","SET_TEST","SET_DATA","SET_POSTS_BY_PAGES","TOGGLE_COMMENT","defaultState","currentUser","searchStr","pagination","pageSize","totalUsersCount","currentPage","cardData","id","title","username","likes","dislikes","votesNumber","timeStamp","Date","image","isOpen","comments","text","postId","storeReducer","state","action","type","payload","buf","setPostsByPages","toggleComment","getPostsByPages","page","dispatch","cardDataBuffer","then","data","console","log","JSON","parse","stringify","result","map","item","length","commentsBuffer","comment"],"mappings":"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","sourcesContent":["import {postAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_TEST = 'SET_TEST'\r\nconst SET_DATA = 'SET_DATA'\r\nconst SET_POSTS_BY_PAGES = 'SET_POSTS_BY_PAGES';\r\nconst TOGGLE_COMMENT = 'TOGGLE_COMMENT';\r\n\r\nconst defaultState = {\r\n    currentUser: 'Guest',\r\n    searchStr: '',\r\n    pagination: {\r\n        pageSize: 5,\r\n        totalUsersCount: 0,\r\n        currentPage: 1\r\n    },\r\n    cardData: [\r\n        {\r\n            id: 1,\r\n            title: 'MyDream',\r\n            username: 'Jeremy',\r\n            likes: [],\r\n            dislikes: [],\r\n            votesNumber: 0,\r\n            timeStamp: new Date(),\r\n            image: 'empty',\r\n            isOpen:false,\r\n            comments: [\r\n                {\r\n                    text: 'Spasibo',\r\n                    postId: 1,\r\n                    id: 1,\r\n                    username: 'Aboba',\r\n                    dislikes: [],\r\n                    likes: [],\r\n                    votesNumber: 0,\r\n                    timeStamp: new Date()\r\n                }\r\n            ]\r\n        }\r\n            \r\n    ]\r\n\r\n}\r\n\r\n\r\nconst storeReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return {\r\n\r\n            }\r\n        case SET_TEST:\r\n            return {...state, currentUser: action.payload}\r\n        case SET_POSTS_BY_PAGES:\r\n            return {...state, cardData: action.payload}\r\n        case TOGGLE_COMMENT:\r\n            let buf = [...state.cardData];\r\n            let postId = 2;\r\n            buf[postId].isOpen = !buf[postId].isOpen;\r\n            \r\n            return {...state, cardData: buf}\r\n        default:\r\n            return defaultState\r\n    }\r\n}\r\n\r\n\r\nexport const setPostsByPages = (payload) => ({type: SET_POSTS_BY_PAGES, payload})\r\nexport const toggleComment = (payload) => ({type: TOGGLE_COMMENT, payload})\r\n\r\n\r\n\r\n\r\n\r\nexport const getPostsByPages = (page) => {\r\n    return (dispatch) =>{\r\n        let cardDataBuffer;\r\n        postAPI.getPostsByPages(page).then(\r\n            data => {\r\n                console.log(data)\r\n                cardDataBuffer = JSON.parse(JSON.stringify(data.result)) // make deep copy that will not change original data\r\n                cardDataBuffer = cardDataBuffer.map(item => {\r\n                    item['timeStamp'] = item['date']\r\n                    delete item['date'];\r\n                    item['isOpen'] = false;\r\n                    item['votesNumber'] = item['likes'].length - item['dislikes'].length;\r\n                    let commentsBuffer = JSON.parse(JSON.stringify(item['comments']));\r\n                    commentsBuffer = commentsBuffer.map(comment => {\r\n                        comment['votesNumber'] = comment['likes'].length - comment['dislikes'].length;\r\n                        return comment;\r\n                    })\r\n                    item['comments'] = commentsBuffer;\r\n                    return item;\r\n                })\r\n                dispatch(setPostsByPages(cardDataBuffer))\r\n            }\r\n        );\r\n\r\n    }}\r\n\r\n\r\n\r\n\r\nexport default storeReducer;"]},"metadata":{},"sourceType":"module"}